
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b98  08000b98  00010b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  4 .ARM          00000000  08000ba4  08000ba4  00010bac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ba4  08000bac  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ba4  08000ba4  00010ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ba8  08000ba8  00010ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010bac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010bac  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011a5  00000000  00000000  00010bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003eb  00000000  00000000  00011d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00012170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000e0  00000000  00000000  00012288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ff1  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001610  00000000  00000000  00014359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008e47  00000000  00000000  00015969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e7b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000038c  00000000  00000000  0001e800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b80 	.word	0x08000b80

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b80 	.word	0x08000b80

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI_GPIOInits>:
 * use below configs
 * - SPI-2 master mode
 * - SCLK: max possible
 * - DFF = 0 and DFF = 1
 * */
void SPI_GPIOInits(void){
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB; //
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <SPI_GPIOInits+0x58>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	// SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f9a7 	bl	8000570 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f9a1 	bl	8000570 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800022e:	230e      	movs	r3, #14
 8000230:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	4618      	mov	r0, r3
 8000236:	f000 f99b 	bl	8000570 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800023a:	230c      	movs	r3, #12
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f995 	bl	8000570 <GPIO_Init>
}
 8000246:	bf00      	nop
 8000248:	3710      	adds	r7, #16
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40020400 	.word	0x40020400

08000254 <SPI2_Inits>:

void SPI2_Inits(){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <SPI2_Inits+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800025e:	2301      	movs	r3, #1
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000262:	2301      	movs	r3, #1
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; //8mhz
 8000266:	2300      	movs	r3, #0
 8000268:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026a:	2300      	movs	r3, #0
 800026c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800026e:	2300      	movs	r3, #0
 8000270:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;// software slave management enabled
 8000276:	2301      	movs	r3, #1
 8000278:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fb7f 	bl	8000980 <SPI_Init>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40003800 	.word	0x40003800

08000290 <main>:


int main(void){
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 8000296:	4a13      	ldr	r2, [pc, #76]	; (80002e4 <main+0x54>)
 8000298:	463b      	mov	r3, r7
 800029a:	ca07      	ldmia	r2, {r0, r1, r2}
 800029c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// this function is to init. the GPIO pins to function as SPI
	SPI_GPIOInits();
 80002a0:	f7ff ffaa 	bl	80001f8 <SPI_GPIOInits>

	// init SPI configs
	SPI2_Inits();
 80002a4:	f7ff ffd6 	bl	8000254 <SPI2_Inits>

	// this makes NSS internally high
	SPI_SSIConfig(SPI2, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	480f      	ldr	r0, [pc, #60]	; (80002e8 <main+0x58>)
 80002ac:	f000 fc27 	bl	8000afe <SPI_SSIConfig>
	// enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <main+0x58>)
 80002b4:	f000 fc07 	bl	8000ac6 <SPI_PeripheralControl>

	while(1){
		SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff94 	bl	80001e8 <strlen>
 80002c0:	4602      	mov	r2, r0
 80002c2:	463b      	mov	r3, r7
 80002c4:	4619      	mov	r1, r3
 80002c6:	4808      	ldr	r0, [pc, #32]	; (80002e8 <main+0x58>)
 80002c8:	f000 fbb5 	bl	8000a36 <SPI_SendData>
		for(int i = 0; i<10000; i++){
 80002cc:	2300      	movs	r3, #0
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	e002      	b.n	80002d8 <main+0x48>
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3301      	adds	r3, #1
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	f242 720f 	movw	r2, #9999	; 0x270f
 80002de:	4293      	cmp	r3, r2
 80002e0:	ddf7      	ble.n	80002d2 <main+0x42>
		SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 80002e2:	e7e9      	b.n	80002b8 <main+0x28>
 80002e4:	08000b98 	.word	0x08000b98
 80002e8:	40003800 	.word	0x40003800

080002ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ec:	480d      	ldr	r0, [pc, #52]	; (8000324 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f4:	480c      	ldr	r0, [pc, #48]	; (8000328 <LoopForever+0x6>)
  ldr r1, =_edata
 80002f6:	490d      	ldr	r1, [pc, #52]	; (800032c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002f8:	4a0d      	ldr	r2, [pc, #52]	; (8000330 <LoopForever+0xe>)
  movs r3, #0
 80002fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002fc:	e002      	b.n	8000304 <LoopCopyDataInit>

080002fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000302:	3304      	adds	r3, #4

08000304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000308:	d3f9      	bcc.n	80002fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <LoopForever+0x12>)
  ldr r4, =_ebss
 800030c:	4c0a      	ldr	r4, [pc, #40]	; (8000338 <LoopForever+0x16>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000310:	e001      	b.n	8000316 <LoopFillZerobss>

08000312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000314:	3204      	adds	r2, #4

08000316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000318:	d3fb      	bcc.n	8000312 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800031a:	f000 fc0d 	bl	8000b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ffb7 	bl	8000290 <main>

08000322 <LoopForever>:

LoopForever:
    b LoopForever
 8000322:	e7fe      	b.n	8000322 <LoopForever>
  ldr   r0, =_estack
 8000324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800032c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000330:	08000bac 	.word	0x08000bac
  ldr r2, =_sbss
 8000334:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000338:	2000001c 	.word	0x2000001c

0800033c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800033c:	e7fe      	b.n	800033c <ADC_IRQHandler>
	...

08000340 <GPIO_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enOrDi){
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d178      	bne.n	8000444 <GPIO_PeriClockControl+0x104>
		if(pGPIOx == GPIOA){
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a7a      	ldr	r2, [pc, #488]	; (8000540 <GPIO_PeriClockControl+0x200>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800035a:	4b7a      	ldr	r3, [pc, #488]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a79      	ldr	r2, [pc, #484]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000360:	f043 0301 	orr.w	r3, r3, #1
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PCLK_DI();
		}else if(pGPIOx == GPIOK){
			GPIOK_PCLK_DI();
		}
	}
}
 8000366:	e0e5      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB){
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a77      	ldr	r2, [pc, #476]	; (8000548 <GPIO_PeriClockControl+0x208>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000370:	4b74      	ldr	r3, [pc, #464]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a73      	ldr	r2, [pc, #460]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e0da      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC){
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a72      	ldr	r2, [pc, #456]	; (800054c <GPIO_PeriClockControl+0x20c>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000386:	4b6f      	ldr	r3, [pc, #444]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a6e      	ldr	r2, [pc, #440]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800038c:	f043 0304 	orr.w	r3, r3, #4
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e0cf      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOD){
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a6e      	ldr	r2, [pc, #440]	; (8000550 <GPIO_PeriClockControl+0x210>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800039c:	4b69      	ldr	r3, [pc, #420]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a68      	ldr	r2, [pc, #416]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003a2:	f043 0308 	orr.w	r3, r3, #8
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e0c4      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOE){
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a69      	ldr	r2, [pc, #420]	; (8000554 <GPIO_PeriClockControl+0x214>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003b2:	4b64      	ldr	r3, [pc, #400]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a63      	ldr	r2, [pc, #396]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003b8:	f043 0310 	orr.w	r3, r3, #16
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e0b9      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF){
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a65      	ldr	r2, [pc, #404]	; (8000558 <GPIO_PeriClockControl+0x218>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003c8:	4b5e      	ldr	r3, [pc, #376]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a5d      	ldr	r2, [pc, #372]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003ce:	f043 0320 	orr.w	r3, r3, #32
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e0ae      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOG){
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a60      	ldr	r2, [pc, #384]	; (800055c <GPIO_PeriClockControl+0x21c>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003de:	4b59      	ldr	r3, [pc, #356]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a58      	ldr	r2, [pc, #352]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e0a3      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOH){
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a5c      	ldr	r2, [pc, #368]	; (8000560 <GPIO_PeriClockControl+0x220>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003f4:	4b53      	ldr	r3, [pc, #332]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a52      	ldr	r2, [pc, #328]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e098      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a57      	ldr	r2, [pc, #348]	; (8000564 <GPIO_PeriClockControl+0x224>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 800040a:	4b4e      	ldr	r3, [pc, #312]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a4d      	ldr	r2, [pc, #308]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e08d      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOJ){
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a53      	ldr	r2, [pc, #332]	; (8000568 <GPIO_PeriClockControl+0x228>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000420:	4b48      	ldr	r3, [pc, #288]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a47      	ldr	r2, [pc, #284]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000426:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e082      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOK){
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a4e      	ldr	r2, [pc, #312]	; (800056c <GPIO_PeriClockControl+0x22c>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d17e      	bne.n	8000534 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 8000436:	4b43      	ldr	r3, [pc, #268]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a42      	ldr	r2, [pc, #264]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800043c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e077      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA){
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a3e      	ldr	r2, [pc, #248]	; (8000540 <GPIO_PeriClockControl+0x200>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 800044c:	4b3d      	ldr	r3, [pc, #244]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a3c      	ldr	r2, [pc, #240]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000452:	f023 0301 	bic.w	r3, r3, #1
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e06c      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB){
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a3a      	ldr	r2, [pc, #232]	; (8000548 <GPIO_PeriClockControl+0x208>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000462:	4b38      	ldr	r3, [pc, #224]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a37      	ldr	r2, [pc, #220]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000468:	f023 0302 	bic.w	r3, r3, #2
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e061      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a36      	ldr	r2, [pc, #216]	; (800054c <GPIO_PeriClockControl+0x20c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000478:	4b32      	ldr	r3, [pc, #200]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a31      	ldr	r2, [pc, #196]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800047e:	f023 0304 	bic.w	r3, r3, #4
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e056      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOD){
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a31      	ldr	r2, [pc, #196]	; (8000550 <GPIO_PeriClockControl+0x210>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 800048e:	4b2d      	ldr	r3, [pc, #180]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a2c      	ldr	r2, [pc, #176]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000494:	f023 0308 	bic.w	r3, r3, #8
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e04b      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOE){
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a2d      	ldr	r2, [pc, #180]	; (8000554 <GPIO_PeriClockControl+0x214>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d106      	bne.n	80004b2 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 80004a4:	4b27      	ldr	r3, [pc, #156]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a26      	ldr	r2, [pc, #152]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004aa:	f023 0310 	bic.w	r3, r3, #16
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	e040      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF){
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a28      	ldr	r2, [pc, #160]	; (8000558 <GPIO_PeriClockControl+0x218>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80004ba:	4b22      	ldr	r3, [pc, #136]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004be:	4a21      	ldr	r2, [pc, #132]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004c0:	f023 0320 	bic.w	r3, r3, #32
 80004c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c6:	e035      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOG){
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4a24      	ldr	r2, [pc, #144]	; (800055c <GPIO_PeriClockControl+0x21c>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d106      	bne.n	80004de <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d4:	4a1b      	ldr	r2, [pc, #108]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004dc:	e02a      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOH){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4a1f      	ldr	r2, [pc, #124]	; (8000560 <GPIO_PeriClockControl+0x220>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d106      	bne.n	80004f4 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f2:	e01f      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <GPIO_PeriClockControl+0x224>)
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d106      	bne.n	800050a <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <GPIO_PeriClockControl+0x204>)
 80004fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000500:	4a10      	ldr	r2, [pc, #64]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000502:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000506:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000508:	e014      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOJ){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a16      	ldr	r2, [pc, #88]	; (8000568 <GPIO_PeriClockControl+0x228>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d106      	bne.n	8000520 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000512:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <GPIO_PeriClockControl+0x204>)
 8000518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051e:	e009      	b.n	8000534 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOK){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <GPIO_PeriClockControl+0x22c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d105      	bne.n	8000534 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8000528:	4b06      	ldr	r3, [pc, #24]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800052a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <GPIO_PeriClockControl+0x204>)
 800052e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000532:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	40020000 	.word	0x40020000
 8000544:	40023800 	.word	0x40023800
 8000548:	40020400 	.word	0x40020400
 800054c:	40020800 	.word	0x40020800
 8000550:	40020c00 	.word	0x40020c00
 8000554:	40021000 	.word	0x40021000
 8000558:	40021400 	.word	0x40021400
 800055c:	40021800 	.word	0x40021800
 8000560:	40021c00 	.word	0x40021c00
 8000564:	40022000 	.word	0x40022000
 8000568:	40022400 	.word	0x40022400
 800056c:	40022800 	.word	0x40022800

08000570 <GPIO_Init>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; // temp register
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx,ENABLE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2101      	movs	r1, #1
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fedc 	bl	8000340 <GPIO_PeriClockControl>

	// Configure the mode of the gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	795b      	ldrb	r3, [r3, #5]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d821      	bhi.n	80005d4 <GPIO_Init+0x64>
		// non interrupt mode
		// look to GPIO Mode Register in the reference manual
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	795b      	ldrb	r3, [r3, #5]
 8000594:	461a      	mov	r2, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	791b      	ldrb	r3, [r3, #4]
 800059a:	005b      	lsls	r3, r3, #1
 800059c:	fa02 f303 	lsl.w	r3, r2, r3
 80005a0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	4619      	mov	r1, r3
 80005ae:	2303      	movs	r3, #3
 80005b0:	408b      	lsls	r3, r1
 80005b2:	43db      	mvns	r3, r3
 80005b4:	4619      	mov	r1, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	400a      	ands	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	6819      	ldr	r1, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	697a      	ldr	r2, [r7, #20]
 80005ca:	430a      	orrs	r2, r1
 80005cc:	601a      	str	r2, [r3, #0]
		temp = 0; // clear temp
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e0c2      	b.n	800075a <GPIO_Init+0x1ea>
	}else{
		// interrupt mode
		/*Pin must be in input configuration*/
		/*Configure the edge trigger*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	795b      	ldrb	r3, [r3, #5]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d117      	bne.n	800060c <GPIO_Init+0x9c>
			// Configure the FTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <GPIO_Init+0x18c>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	7912      	ldrb	r2, [r2, #4]
 80005e4:	4611      	mov	r1, r2
 80005e6:	2201      	movs	r2, #1
 80005e8:	408a      	lsls	r2, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a43      	ldr	r2, [pc, #268]	; (80006fc <GPIO_Init+0x18c>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	60d3      	str	r3, [r2, #12]
			// clear the RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <GPIO_Init+0x18c>)
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	687a      	ldr	r2, [r7, #4]
 80005f8:	7912      	ldrb	r2, [r2, #4]
 80005fa:	4611      	mov	r1, r2
 80005fc:	2201      	movs	r2, #1
 80005fe:	408a      	lsls	r2, r1
 8000600:	43d2      	mvns	r2, r2
 8000602:	4611      	mov	r1, r2
 8000604:	4a3d      	ldr	r2, [pc, #244]	; (80006fc <GPIO_Init+0x18c>)
 8000606:	400b      	ands	r3, r1
 8000608:	6093      	str	r3, [r2, #8]
 800060a:	e035      	b.n	8000678 <GPIO_Init+0x108>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	795b      	ldrb	r3, [r3, #5]
 8000610:	2b05      	cmp	r3, #5
 8000612:	d117      	bne.n	8000644 <GPIO_Init+0xd4>
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000614:	4b39      	ldr	r3, [pc, #228]	; (80006fc <GPIO_Init+0x18c>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a35      	ldr	r2, [pc, #212]	; (80006fc <GPIO_Init+0x18c>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6093      	str	r3, [r2, #8]
			// clear the RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062a:	4b34      	ldr	r3, [pc, #208]	; (80006fc <GPIO_Init+0x18c>)
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	7912      	ldrb	r2, [r2, #4]
 8000632:	4611      	mov	r1, r2
 8000634:	2201      	movs	r2, #1
 8000636:	408a      	lsls	r2, r1
 8000638:	43d2      	mvns	r2, r2
 800063a:	4611      	mov	r1, r2
 800063c:	4a2f      	ldr	r2, [pc, #188]	; (80006fc <GPIO_Init+0x18c>)
 800063e:	400b      	ands	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
 8000642:	e019      	b.n	8000678 <GPIO_Init+0x108>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	795b      	ldrb	r3, [r3, #5]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d115      	bne.n	8000678 <GPIO_Init+0x108>
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <GPIO_Init+0x18c>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	4611      	mov	r1, r2
 800065c:	4a27      	ldr	r2, [pc, #156]	; (80006fc <GPIO_Init+0x18c>)
 800065e:	430b      	orrs	r3, r1
 8000660:	60d3      	str	r3, [r2, #12]
			// clear the RTSR bit
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <GPIO_Init+0x18c>)
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	7912      	ldrb	r2, [r2, #4]
 800066a:	4611      	mov	r1, r2
 800066c:	2201      	movs	r2, #1
 800066e:	408a      	lsls	r2, r1
 8000670:	4611      	mov	r1, r2
 8000672:	4a22      	ldr	r2, [pc, #136]	; (80006fc <GPIO_Init+0x18c>)
 8000674:	430b      	orrs	r3, r1
 8000676:	6093      	str	r3, [r2, #8]
		}
		/*Configure the GPIO Port Selection SYSCFG_EXTICR*/
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	f003 0303 	and.w	r3, r3, #3
 8000688:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <GPIO_Init+0x190>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d045      	beq.n	8000720 <GPIO_Init+0x1b0>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a1a      	ldr	r2, [pc, #104]	; (8000704 <GPIO_Init+0x194>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d02b      	beq.n	80006f6 <GPIO_Init+0x186>
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a19      	ldr	r2, [pc, #100]	; (8000708 <GPIO_Init+0x198>)
 80006a4:	4293      	cmp	r3, r2
 80006a6:	d024      	beq.n	80006f2 <GPIO_Init+0x182>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a17      	ldr	r2, [pc, #92]	; (800070c <GPIO_Init+0x19c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d01d      	beq.n	80006ee <GPIO_Init+0x17e>
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <GPIO_Init+0x1a0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d016      	beq.n	80006ea <GPIO_Init+0x17a>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <GPIO_Init+0x1a4>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d00f      	beq.n	80006e6 <GPIO_Init+0x176>
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a13      	ldr	r2, [pc, #76]	; (8000718 <GPIO_Init+0x1a8>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d008      	beq.n	80006e2 <GPIO_Init+0x172>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a11      	ldr	r2, [pc, #68]	; (800071c <GPIO_Init+0x1ac>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d101      	bne.n	80006de <GPIO_Init+0x16e>
 80006da:	2307      	movs	r3, #7
 80006dc:	e021      	b.n	8000722 <GPIO_Init+0x1b2>
 80006de:	2300      	movs	r3, #0
 80006e0:	e01f      	b.n	8000722 <GPIO_Init+0x1b2>
 80006e2:	2306      	movs	r3, #6
 80006e4:	e01d      	b.n	8000722 <GPIO_Init+0x1b2>
 80006e6:	2305      	movs	r3, #5
 80006e8:	e01b      	b.n	8000722 <GPIO_Init+0x1b2>
 80006ea:	2304      	movs	r3, #4
 80006ec:	e019      	b.n	8000722 <GPIO_Init+0x1b2>
 80006ee:	2303      	movs	r3, #3
 80006f0:	e017      	b.n	8000722 <GPIO_Init+0x1b2>
 80006f2:	2302      	movs	r3, #2
 80006f4:	e015      	b.n	8000722 <GPIO_Init+0x1b2>
 80006f6:	2301      	movs	r3, #1
 80006f8:	e013      	b.n	8000722 <GPIO_Init+0x1b2>
 80006fa:	bf00      	nop
 80006fc:	40013c00 	.word	0x40013c00
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40020800 	.word	0x40020800
 800070c:	40020c00 	.word	0x40020c00
 8000710:	40021000 	.word	0x40021000
 8000714:	40021400 	.word	0x40021400
 8000718:	40021800 	.word	0x40021800
 800071c:	40021c00 	.word	0x40021c00
 8000720:	2300      	movs	r3, #0
 8000722:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000724:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <GPIO_Init+0x324>)
 8000726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000728:	4a5a      	ldr	r2, [pc, #360]	; (8000894 <GPIO_Init+0x324>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2*4);
 8000730:	7c7a      	ldrb	r2, [r7, #17]
 8000732:	7cbb      	ldrb	r3, [r7, #18]
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	fa02 f103 	lsl.w	r1, r2, r3
 800073a:	4a57      	ldr	r2, [pc, #348]	; (8000898 <GPIO_Init+0x328>)
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	3302      	adds	r3, #2
 8000740:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		/*enable interrupt delivery from peripheral to the processor*/
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000744:	4b55      	ldr	r3, [pc, #340]	; (800089c <GPIO_Init+0x32c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	7912      	ldrb	r2, [r2, #4]
 800074c:	4611      	mov	r1, r2
 800074e:	2201      	movs	r2, #1
 8000750:	408a      	lsls	r2, r1
 8000752:	4611      	mov	r1, r2
 8000754:	4a51      	ldr	r2, [pc, #324]	; (800089c <GPIO_Init+0x32c>)
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
		/*Enable interrupt reception on that IRQ number(Processor side)*/
		/*Implement IRQ handler*/

	}
		// Configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	799b      	ldrb	r3, [r3, #6]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	4619      	mov	r1, r3
 8000778:	2303      	movs	r3, #3
 800077a:	408b      	lsls	r3, r1
 800077c:	43db      	mvns	r3, r3
 800077e:	4619      	mov	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	400a      	ands	r2, r1
 8000786:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6899      	ldr	r1, [r3, #8]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	697a      	ldr	r2, [r7, #20]
 8000794:	430a      	orrs	r2, r1
 8000796:	609a      	str	r2, [r3, #8]
		temp = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
		// configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<< (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	79db      	ldrb	r3, [r3, #7]
 80007a0:	461a      	mov	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	791b      	ldrb	r3, [r3, #4]
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	68da      	ldr	r2, [r3, #12]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	4619      	mov	r1, r3
 80007ba:	2303      	movs	r3, #3
 80007bc:	408b      	lsls	r3, r1
 80007be:	43db      	mvns	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	400a      	ands	r2, r1
 80007c8:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	68d9      	ldr	r1, [r3, #12]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	430a      	orrs	r2, r1
 80007d8:	60da      	str	r2, [r3, #12]
		temp = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
		// configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7a1b      	ldrb	r3, [r3, #8]
 80007e2:	461a      	mov	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	791b      	ldrb	r3, [r3, #4]
 80007e8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ec:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	4619      	mov	r1, r3
 80007fa:	2301      	movs	r3, #1
 80007fc:	408b      	lsls	r3, r1
 80007fe:	43db      	mvns	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	400a      	ands	r2, r1
 8000808:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	6859      	ldr	r1, [r3, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	430a      	orrs	r2, r1
 8000818:	605a      	str	r2, [r3, #4]
		temp = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
		// configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	795b      	ldrb	r3, [r3, #5]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d132      	bne.n	800088c <GPIO_Init+0x31c>
			uint32_t temp1, temp2;
			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	08db      	lsrs	r3, r3, #3
 800082c:	b2db      	uxtb	r3, r3
 800082e:	60fb      	str	r3, [r7, #12]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	60bb      	str	r3, [r7, #8]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	3208      	adds	r2, #8
 8000842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	210f      	movs	r1, #15
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	43db      	mvns	r3, r3
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4011      	ands	r1, r2
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	3208      	adds	r2, #8
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2);
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	3208      	adds	r2, #8
 800086a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a5b      	ldrb	r3, [r3, #9]
 8000872:	4619      	mov	r1, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	4619      	mov	r1, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4311      	orrs	r1, r2
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	3208      	adds	r2, #8
 8000888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 800088c:	bf00      	nop
 800088e:	3718      	adds	r7, #24
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40023800 	.word	0x40023800
 8000898:	40013800 	.word	0x40013800
 800089c:	40013c00 	.word	0x40013c00

080008a0 <SPI_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t enOrDi){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d12b      	bne.n	800090a <SPI_PeriClockControl+0x6a>
		if(pSPIx == SPI1){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <SPI_PeriClockControl+0xcc>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d106      	bne.n	80008c8 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a2c      	ldr	r2, [pc, #176]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
			SPI3_PCLK_DI();
		}else if(pSPIx == SPI4){
			SPI4_PCLK_DI();
		}
	}
}
 80008c6:	e04b      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <SPI_PeriClockControl+0xd4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d106      	bne.n	80008de <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d4:	4a26      	ldr	r2, [pc, #152]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008da:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008dc:	e040      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4a25      	ldr	r2, [pc, #148]	; (8000978 <SPI_PeriClockControl+0xd8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d106      	bne.n	80008f4 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008f2:	e035      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a21      	ldr	r2, [pc, #132]	; (800097c <SPI_PeriClockControl+0xdc>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d131      	bne.n	8000960 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <SPI_PeriClockControl+0xd0>)
 80008fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000900:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000906:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000908:	e02a      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1){
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <SPI_PeriClockControl+0xcc>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d106      	bne.n	8000920 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
}
 800091e:	e01f      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2){
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a14      	ldr	r2, [pc, #80]	; (8000974 <SPI_PeriClockControl+0xd4>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d106      	bne.n	8000936 <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092c:	4a10      	ldr	r2, [pc, #64]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800092e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000932:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000934:	e014      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <SPI_PeriClockControl+0xd8>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d106      	bne.n	800094c <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000944:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000948:	6413      	str	r3, [r2, #64]	; 0x40
}
 800094a:	e009      	b.n	8000960 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <SPI_PeriClockControl+0xdc>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d105      	bne.n	8000960 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SPI_PeriClockControl+0xd0>)
 8000956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000958:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SPI_PeriClockControl+0xd0>)
 800095a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800095e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	40013000 	.word	0x40013000
 8000970:	40023800 	.word	0x40023800
 8000974:	40003800 	.word	0x40003800
 8000978:	40013c00 	.word	0x40013c00
 800097c:	40013400 	.word	0x40013400

08000980 <SPI_Init>:

/**
 *
 * */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	// First configure SPI_CR1 register
	uint32_t tempreg = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2101      	movs	r1, #1
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff84 	bl	80008a0 <SPI_PeriClockControl>

	//1. Configure device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	461a      	mov	r2, r3
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]

	//2. bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD){
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	795b      	ldrb	r3, [r3, #5]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <SPI_Init+0x38>
		// bidi mode bit must be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e014      	b.n	80009e2 <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD){
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	795b      	ldrb	r3, [r3, #5]
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d104      	bne.n	80009ca <SPI_Init+0x4a>
		// bidi mode bit must be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e00b      	b.n	80009e2 <SPI_Init+0x62>
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY){
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	795b      	ldrb	r3, [r3, #5]
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d107      	bne.n	80009e2 <SPI_Init+0x62>
		// bidi mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d8:	60fb      	str	r3, [r7, #12]
		// RXOnly bit must be set
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e0:	60fb      	str	r3, [r7, #12]
	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_TXONLY){
		// TODO
	}

	// 3. Configure spi serial clock
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	799b      	ldrb	r3, [r3, #6]
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	461a      	mov	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]

	// 4. Configure DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	02db      	lsls	r3, r3, #11
 80009f6:	461a      	mov	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	461a      	mov	r2, r3
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	60fb      	str	r3, [r7, #12]

	// 6. configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	7a5b      	ldrb	r3, [r3, #9]
 8000a10:	461a      	mov	r2, r3
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]

	// 7. configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a9b      	ldrb	r3, [r3, #10]
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	461a      	mov	r2, r3
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	601a      	str	r2, [r3, #0]

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <SPI_SendData>:

/*
 * Send data over the SPI
 * This is a blocking call!
 **/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	60f8      	str	r0, [r7, #12]
 8000a3e:	60b9      	str	r1, [r7, #8]
 8000a40:	607a      	str	r2, [r7, #4]
	while(Len > 0){
 8000a42:	e024      	b.n	8000a8e <SPI_SendData+0x58>
		//1. wait until TXE is set
		// while(!(pSPIx->SR & (1 << 1)));
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000a44:	bf00      	nop
 8000a46:	2102      	movs	r1, #2
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f828 	bl	8000a9e <SPI_GetFlagStatus>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f8      	beq.n	8000a46 <SPI_SendData+0x10>

		// 2. check DFF bit in CR1
		if(pSPIx->CR1 & (1 << SPI_CR1_DFF)){
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00b      	beq.n	8000a78 <SPI_SendData+0x42>
			// 16 bit DFF
			// load the data into the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	461a      	mov	r2, r3
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	60da      	str	r2, [r3, #12]
			Len = Len-2;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3b02      	subs	r3, #2
 8000a6e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	3301      	adds	r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	e00a      	b.n	8000a8e <SPI_SendData+0x58>
		}else{
			// 8 bit DFF
			pSPIx->DR = *pTxBuffer;
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	60da      	str	r2, [r3, #12]
			Len--;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60bb      	str	r3, [r7, #8]
	while(Len > 0){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d1d7      	bne.n	8000a44 <SPI_SendData+0xe>
		}
	}
}
 8000a94:	bf00      	nop
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t flagName){
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & flagName)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SPI_GetFlagStatus+0x1a>
		return FLAG_SET;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	e000      	b.n	8000aba <SPI_GetFlagStatus+0x1c>
	return FLAG_RESET;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000ad2:	78fb      	ldrb	r3, [r7, #3]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d106      	bne.n	8000ae6 <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000ae4:	e005      	b.n	8000af2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <SPI_SSIConfig>:

void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi){
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE){
 8000b0a:	78fb      	ldrb	r3, [r7, #3]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d106      	bne.n	8000b1e <SPI_SSIConfig+0x20>
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
	}else{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000b1c:	e005      	b.n	8000b2a <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	601a      	str	r2, [r3, #0]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <__libc_init_array>:
 8000b38:	b570      	push	{r4, r5, r6, lr}
 8000b3a:	4d0d      	ldr	r5, [pc, #52]	; (8000b70 <__libc_init_array+0x38>)
 8000b3c:	4c0d      	ldr	r4, [pc, #52]	; (8000b74 <__libc_init_array+0x3c>)
 8000b3e:	1b64      	subs	r4, r4, r5
 8000b40:	10a4      	asrs	r4, r4, #2
 8000b42:	2600      	movs	r6, #0
 8000b44:	42a6      	cmp	r6, r4
 8000b46:	d109      	bne.n	8000b5c <__libc_init_array+0x24>
 8000b48:	4d0b      	ldr	r5, [pc, #44]	; (8000b78 <__libc_init_array+0x40>)
 8000b4a:	4c0c      	ldr	r4, [pc, #48]	; (8000b7c <__libc_init_array+0x44>)
 8000b4c:	f000 f818 	bl	8000b80 <_init>
 8000b50:	1b64      	subs	r4, r4, r5
 8000b52:	10a4      	asrs	r4, r4, #2
 8000b54:	2600      	movs	r6, #0
 8000b56:	42a6      	cmp	r6, r4
 8000b58:	d105      	bne.n	8000b66 <__libc_init_array+0x2e>
 8000b5a:	bd70      	pop	{r4, r5, r6, pc}
 8000b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b60:	4798      	blx	r3
 8000b62:	3601      	adds	r6, #1
 8000b64:	e7ee      	b.n	8000b44 <__libc_init_array+0xc>
 8000b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b6a:	4798      	blx	r3
 8000b6c:	3601      	adds	r6, #1
 8000b6e:	e7f2      	b.n	8000b56 <__libc_init_array+0x1e>
 8000b70:	08000ba4 	.word	0x08000ba4
 8000b74:	08000ba4 	.word	0x08000ba4
 8000b78:	08000ba4 	.word	0x08000ba4
 8000b7c:	08000ba8 	.word	0x08000ba8

08000b80 <_init>:
 8000b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b82:	bf00      	nop
 8000b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b86:	bc08      	pop	{r3}
 8000b88:	469e      	mov	lr, r3
 8000b8a:	4770      	bx	lr

08000b8c <_fini>:
 8000b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8e:	bf00      	nop
 8000b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b92:	bc08      	pop	{r3}
 8000b94:	469e      	mov	lr, r3
 8000b96:	4770      	bx	lr
