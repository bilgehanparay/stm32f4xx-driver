
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000678  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000820  08000828  00010828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000820  08000820  00010828  2**0
                  CONTENTS
  4 .ARM          00000000  08000820  08000820  00010828  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000820  08000828  00010828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000820  08000820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000824  08000824  00010824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010828  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010828  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010828  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000096e  00000000  00000000  00010858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000027a  00000000  00000000  000111c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  000114f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000130f  00000000  00000000  00011588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cd1  00000000  00000000  00012897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005111  00000000  00000000  00013568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00018679  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  000186cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000808 	.word	0x08000808

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000808 	.word	0x08000808

080001e8 <delay>:

#include "stm32f407xx.h"
#include "stm32f407xx_gpio_driver.h"
#define HIGH 1
#define BTN_PRESSED HIGH
void delay(uint32_t delay){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	while(delay > 0){
 80001f0:	e002      	b.n	80001f8 <delay+0x10>
		delay--;
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	3b01      	subs	r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
	while(delay > 0){
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d1f9      	bne.n	80001f2 <delay+0xa>
	}
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr

0800020c <main>:

int main(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	b088      	sub	sp, #32
 8000210:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLED, GPIOBtn;
	uint8_t val;

	GpioLED.pGPIOx = GPIOD;
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <main+0x78>)
 8000214:	613b      	str	r3, [r7, #16]
	GpioLED.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000216:	230c      	movs	r3, #12
 8000218:	753b      	strb	r3, [r7, #20]
	GpioLED.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 800021a:	2301      	movs	r3, #1
 800021c:	757b      	strb	r3, [r7, #21]
	GpioLED.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021e:	2302      	movs	r3, #2
 8000220:	75bb      	strb	r3, [r7, #22]
	GpioLED.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000222:	2300      	movs	r3, #0
 8000224:	763b      	strb	r3, [r7, #24]
	GpioLED.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000226:	2300      	movs	r3, #0
 8000228:	75fb      	strb	r3, [r7, #23]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 800022a:	2101      	movs	r1, #1
 800022c:	4815      	ldr	r0, [pc, #84]	; (8000284 <main+0x78>)
 800022e:	f000 f859 	bl	80002e4 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLED);
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f96c 	bl	8000514 <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOA;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x7c>)
 800023e:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000240:	2300      	movs	r3, #0
 8000242:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000244:	2300      	movs	r3, #0
 8000246:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000248:	2302      	movs	r3, #2
 800024a:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024c:	2300      	movs	r3, #0
 800024e:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000250:	2101      	movs	r1, #1
 8000252:	480d      	ldr	r0, [pc, #52]	; (8000288 <main+0x7c>)
 8000254:	f000 f846 	bl	80002e4 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	4618      	mov	r0, r3
 800025c:	f000 f95a 	bl	8000514 <GPIO_Init>

	while(1){
		val = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0);
 8000260:	2100      	movs	r1, #0
 8000262:	4809      	ldr	r0, [pc, #36]	; (8000288 <main+0x7c>)
 8000264:	f000 fa80 	bl	8000768 <GPIO_ReadFromInputPin>
 8000268:	4603      	mov	r3, r0
 800026a:	77fb      	strb	r3, [r7, #31]
		if(val == BTN_PRESSED){
 800026c:	7ffb      	ldrb	r3, [r7, #31]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d1f6      	bne.n	8000260 <main+0x54>
			delay(250000);
 8000272:	4806      	ldr	r0, [pc, #24]	; (800028c <main+0x80>)
 8000274:	f7ff ffb8 	bl	80001e8 <delay>
			GPIO_TogglePin(GPIOD, 12);
 8000278:	210c      	movs	r1, #12
 800027a:	4802      	ldr	r0, [pc, #8]	; (8000284 <main+0x78>)
 800027c:	f000 fa8a 	bl	8000794 <GPIO_TogglePin>
		val = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0);
 8000280:	e7ee      	b.n	8000260 <main+0x54>
 8000282:	bf00      	nop
 8000284:	40020c00 	.word	0x40020c00
 8000288:	40020000 	.word	0x40020000
 800028c:	0003d090 	.word	0x0003d090

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 fa7f 	bl	80007c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ffa3 	bl	800020c <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	08000828 	.word	0x08000828
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <GPIO_PeriClockControl>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t enOrDi){
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]
	if(enOrDi == ENABLE){
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d178      	bne.n	80003e8 <GPIO_PeriClockControl+0x104>
		if(pGPIOx == GPIOA){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a7a      	ldr	r2, [pc, #488]	; (80004e4 <GPIO_PeriClockControl+0x200>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002fe:	4b7a      	ldr	r3, [pc, #488]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a79      	ldr	r2, [pc, #484]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
			GPIOJ_PCLK_DI();
		}else if(pGPIOx == GPIOK){
			GPIOK_PCLK_DI();
		}
	}
}
 800030a:	e0e5      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB){
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a77      	ldr	r2, [pc, #476]	; (80004ec <GPIO_PeriClockControl+0x208>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000314:	4b74      	ldr	r3, [pc, #464]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a73      	ldr	r2, [pc, #460]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e0da      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a72      	ldr	r2, [pc, #456]	; (80004f0 <GPIO_PeriClockControl+0x20c>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800032a:	4b6f      	ldr	r3, [pc, #444]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a6e      	ldr	r2, [pc, #440]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e0cf      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOD){
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a6e      	ldr	r2, [pc, #440]	; (80004f4 <GPIO_PeriClockControl+0x210>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000340:	4b69      	ldr	r3, [pc, #420]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a68      	ldr	r2, [pc, #416]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e0c4      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOE){
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a69      	ldr	r2, [pc, #420]	; (80004f8 <GPIO_PeriClockControl+0x214>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000356:	4b64      	ldr	r3, [pc, #400]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a63      	ldr	r2, [pc, #396]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e0b9      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF){
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a65      	ldr	r2, [pc, #404]	; (80004fc <GPIO_PeriClockControl+0x218>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800036c:	4b5e      	ldr	r3, [pc, #376]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a5d      	ldr	r2, [pc, #372]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e0ae      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOG){
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a60      	ldr	r2, [pc, #384]	; (8000500 <GPIO_PeriClockControl+0x21c>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000382:	4b59      	ldr	r3, [pc, #356]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a58      	ldr	r2, [pc, #352]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e0a3      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOH){
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a5c      	ldr	r2, [pc, #368]	; (8000504 <GPIO_PeriClockControl+0x220>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000398:	4b53      	ldr	r3, [pc, #332]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a52      	ldr	r2, [pc, #328]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e098      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI){
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a57      	ldr	r2, [pc, #348]	; (8000508 <GPIO_PeriClockControl+0x224>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80003ae:	4b4e      	ldr	r3, [pc, #312]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a4d      	ldr	r2, [pc, #308]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e08d      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOJ){
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a53      	ldr	r2, [pc, #332]	; (800050c <GPIO_PeriClockControl+0x228>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 80003c4:	4b48      	ldr	r3, [pc, #288]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a47      	ldr	r2, [pc, #284]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e082      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOK){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4e      	ldr	r2, [pc, #312]	; (8000510 <GPIO_PeriClockControl+0x22c>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d17e      	bne.n	80004d8 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 80003da:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a42      	ldr	r2, [pc, #264]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e077      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a3e      	ldr	r2, [pc, #248]	; (80004e4 <GPIO_PeriClockControl+0x200>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 80003f0:	4b3d      	ldr	r3, [pc, #244]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a3c      	ldr	r2, [pc, #240]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80003f6:	f023 0301 	bic.w	r3, r3, #1
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e06c      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOB){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a3a      	ldr	r2, [pc, #232]	; (80004ec <GPIO_PeriClockControl+0x208>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000406:	4b38      	ldr	r3, [pc, #224]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a37      	ldr	r2, [pc, #220]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e061      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOC){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a36      	ldr	r2, [pc, #216]	; (80004f0 <GPIO_PeriClockControl+0x20c>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 800041c:	4b32      	ldr	r3, [pc, #200]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a31      	ldr	r2, [pc, #196]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000422:	f023 0304 	bic.w	r3, r3, #4
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e056      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOD){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a31      	ldr	r2, [pc, #196]	; (80004f4 <GPIO_PeriClockControl+0x210>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 8000432:	4b2d      	ldr	r3, [pc, #180]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a2c      	ldr	r2, [pc, #176]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000438:	f023 0308 	bic.w	r3, r3, #8
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e04b      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOE){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a2d      	ldr	r2, [pc, #180]	; (80004f8 <GPIO_PeriClockControl+0x214>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 8000448:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800044e:	f023 0310 	bic.w	r3, r3, #16
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e040      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOF){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a28      	ldr	r2, [pc, #160]	; (80004fc <GPIO_PeriClockControl+0x218>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 800045e:	4b22      	ldr	r3, [pc, #136]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a21      	ldr	r2, [pc, #132]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000464:	f023 0320 	bic.w	r3, r3, #32
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e035      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOG){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a24      	ldr	r2, [pc, #144]	; (8000500 <GPIO_PeriClockControl+0x21c>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 8000474:	4b1c      	ldr	r3, [pc, #112]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a1b      	ldr	r2, [pc, #108]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800047a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e02a      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOH){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <GPIO_PeriClockControl+0x220>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 800048a:	4b17      	ldr	r3, [pc, #92]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 8000490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e01f      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOI){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <GPIO_PeriClockControl+0x224>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a10      	ldr	r2, [pc, #64]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e014      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOJ){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a16      	ldr	r2, [pc, #88]	; (800050c <GPIO_PeriClockControl+0x228>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e009      	b.n	80004d8 <GPIO_PeriClockControl+0x1f4>
		}else if(pGPIOx == GPIOK){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <GPIO_PeriClockControl+0x22c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d105      	bne.n	80004d8 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a05      	ldr	r2, [pc, #20]	; (80004e8 <GPIO_PeriClockControl+0x204>)
 80004d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021400 	.word	0x40021400
 8000500:	40021800 	.word	0x40021800
 8000504:	40021c00 	.word	0x40021c00
 8000508:	40022000 	.word	0x40022000
 800050c:	40022400 	.word	0x40022400
 8000510:	40022800 	.word	0x40022800

08000514 <GPIO_Init>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000514:	b480      	push	{r7}
 8000516:	b087      	sub	sp, #28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint32_t temp=0; // temp register
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	// Configure the mode of the gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG){
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d821      	bhi.n	800056c <GPIO_Init+0x58>
		// non interrupt mode
		// look to GPIO Mode Register in the reference manual
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	461a      	mov	r2, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	fa02 f303 	lsl.w	r3, r2, r3
 8000538:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	4619      	mov	r1, r3
 8000546:	2303      	movs	r3, #3
 8000548:	408b      	lsls	r3, r1
 800054a:	43db      	mvns	r3, r3
 800054c:	4619      	mov	r1, r3
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	400a      	ands	r2, r1
 8000554:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	6819      	ldr	r1, [r3, #0]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	430a      	orrs	r2, r1
 8000564:	601a      	str	r2, [r3, #0]
		temp = 0; // clear temp
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	e05c      	b.n	8000626 <GPIO_Init+0x112>
	}else{
		// interrupt mode
		/*Pin must be in input configuration*/
		/*Configure the edge trigger*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b04      	cmp	r3, #4
 8000572:	d117      	bne.n	80005a4 <GPIO_Init+0x90>
			// Configure the FTSR
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000574:	4b7b      	ldr	r3, [pc, #492]	; (8000764 <GPIO_Init+0x250>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	4611      	mov	r1, r2
 8000584:	4a77      	ldr	r2, [pc, #476]	; (8000764 <GPIO_Init+0x250>)
 8000586:	430b      	orrs	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
			// clear the RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058a:	4b76      	ldr	r3, [pc, #472]	; (8000764 <GPIO_Init+0x250>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	43d2      	mvns	r2, r2
 800059a:	4611      	mov	r1, r2
 800059c:	4a71      	ldr	r2, [pc, #452]	; (8000764 <GPIO_Init+0x250>)
 800059e:	400b      	ands	r3, r1
 80005a0:	6093      	str	r3, [r2, #8]
 80005a2:	e035      	b.n	8000610 <GPIO_Init+0xfc>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b05      	cmp	r3, #5
 80005aa:	d117      	bne.n	80005dc <GPIO_Init+0xc8>
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005ac:	4b6d      	ldr	r3, [pc, #436]	; (8000764 <GPIO_Init+0x250>)
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a69      	ldr	r2, [pc, #420]	; (8000764 <GPIO_Init+0x250>)
 80005be:	430b      	orrs	r3, r1
 80005c0:	6093      	str	r3, [r2, #8]
			// clear the RTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c2:	4b68      	ldr	r3, [pc, #416]	; (8000764 <GPIO_Init+0x250>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	43d2      	mvns	r2, r2
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a63      	ldr	r2, [pc, #396]	; (8000764 <GPIO_Init+0x250>)
 80005d6:	400b      	ands	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
 80005da:	e019      	b.n	8000610 <GPIO_Init+0xfc>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT){
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	795b      	ldrb	r3, [r3, #5]
 80005e0:	2b05      	cmp	r3, #5
 80005e2:	d115      	bne.n	8000610 <GPIO_Init+0xfc>
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005e4:	4b5f      	ldr	r3, [pc, #380]	; (8000764 <GPIO_Init+0x250>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a5b      	ldr	r2, [pc, #364]	; (8000764 <GPIO_Init+0x250>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	60d3      	str	r3, [r2, #12]
			// clear the RTSR bit
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005fa:	4b5a      	ldr	r3, [pc, #360]	; (8000764 <GPIO_Init+0x250>)
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	7912      	ldrb	r2, [r2, #4]
 8000602:	4611      	mov	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	408a      	lsls	r2, r1
 8000608:	4611      	mov	r1, r2
 800060a:	4a56      	ldr	r2, [pc, #344]	; (8000764 <GPIO_Init+0x250>)
 800060c:	430b      	orrs	r3, r1
 800060e:	6093      	str	r3, [r2, #8]
		}
		/*Configure the GPIO Port Selection SYSCFG_EXTICR*/

		/*enable interrupt delivery from peripheral to the processor*/
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000610:	4b54      	ldr	r3, [pc, #336]	; (8000764 <GPIO_Init+0x250>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a50      	ldr	r2, [pc, #320]	; (8000764 <GPIO_Init+0x250>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]
		/*Enable interrupt reception on that IRQ number(Processor side)*/
		/*Implement IRQ handler*/

	}
		// Configure the speed
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	4619      	mov	r1, r3
 8000644:	2303      	movs	r3, #3
 8000646:	408b      	lsls	r3, r1
 8000648:	43db      	mvns	r3, r3
 800064a:	4619      	mov	r1, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	400a      	ands	r2, r1
 8000652:	609a      	str	r2, [r3, #8]
		pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6899      	ldr	r1, [r3, #8]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	697a      	ldr	r2, [r7, #20]
 8000660:	430a      	orrs	r2, r1
 8000662:	609a      	str	r2, [r3, #8]
		temp = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
		// configure the pupd settings
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl<< (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	79db      	ldrb	r3, [r3, #7]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	791b      	ldrb	r3, [r3, #4]
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	2303      	movs	r3, #3
 8000688:	408b      	lsls	r3, r1
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
		pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68d9      	ldr	r1, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	60da      	str	r2, [r3, #12]
		temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
		// configure the optype
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clear bit first
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	4619      	mov	r1, r3
 80006c6:	2301      	movs	r3, #1
 80006c8:	408b      	lsls	r3, r1
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	605a      	str	r2, [r3, #4]
		temp = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]
		// configure the alt functionality
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	795b      	ldrb	r3, [r3, #5]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	d132      	bne.n	8000758 <GPIO_Init+0x244>
			uint32_t temp1, temp2;
			temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	613b      	str	r3, [r7, #16]
			temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	f003 0307 	and.w	r3, r3, #7
 8000704:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	3208      	adds	r2, #8
 800070e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	210f      	movs	r1, #15
 8000718:	fa01 f303 	lsl.w	r3, r1, r3
 800071c:	43db      	mvns	r3, r3
 800071e:	4619      	mov	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4011      	ands	r1, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	3208      	adds	r2, #8
 800072a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	3208      	adds	r2, #8
 8000736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	7a5b      	ldrb	r3, [r3, #9]
 800073e:	4619      	mov	r1, r3
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	fa01 f303 	lsl.w	r3, r1, r3
 8000748:	4619      	mov	r1, r3
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4311      	orrs	r1, r2
 8000750:	693a      	ldr	r2, [r7, #16]
 8000752:	3208      	adds	r2, #8
 8000754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
}
 8000758:	bf00      	nop
 800075a:	371c      	adds	r7, #28
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40013c00 	.word	0x40013c00

08000768 <GPIO_ReadFromInputPin>:
 *
 * @return				- the value of the pin 0 or 1
 *
 * @Note				- none
 * */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	fa22 f303 	lsr.w	r3, r2, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]
	return value;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <GPIO_TogglePin>:
 *
 * @return				- none
 *
 * @Note				- none
 * */
void GPIO_TogglePin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	405a      	eors	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	615a      	str	r2, [r3, #20]
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
	...

080007c0 <__libc_init_array>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	4d0d      	ldr	r5, [pc, #52]	; (80007f8 <__libc_init_array+0x38>)
 80007c4:	4c0d      	ldr	r4, [pc, #52]	; (80007fc <__libc_init_array+0x3c>)
 80007c6:	1b64      	subs	r4, r4, r5
 80007c8:	10a4      	asrs	r4, r4, #2
 80007ca:	2600      	movs	r6, #0
 80007cc:	42a6      	cmp	r6, r4
 80007ce:	d109      	bne.n	80007e4 <__libc_init_array+0x24>
 80007d0:	4d0b      	ldr	r5, [pc, #44]	; (8000800 <__libc_init_array+0x40>)
 80007d2:	4c0c      	ldr	r4, [pc, #48]	; (8000804 <__libc_init_array+0x44>)
 80007d4:	f000 f818 	bl	8000808 <_init>
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	10a4      	asrs	r4, r4, #2
 80007dc:	2600      	movs	r6, #0
 80007de:	42a6      	cmp	r6, r4
 80007e0:	d105      	bne.n	80007ee <__libc_init_array+0x2e>
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e8:	4798      	blx	r3
 80007ea:	3601      	adds	r6, #1
 80007ec:	e7ee      	b.n	80007cc <__libc_init_array+0xc>
 80007ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f2:	4798      	blx	r3
 80007f4:	3601      	adds	r6, #1
 80007f6:	e7f2      	b.n	80007de <__libc_init_array+0x1e>
 80007f8:	08000820 	.word	0x08000820
 80007fc:	08000820 	.word	0x08000820
 8000800:	08000820 	.word	0x08000820
 8000804:	08000824 	.word	0x08000824

08000808 <_init>:
 8000808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800080a:	bf00      	nop
 800080c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080e:	bc08      	pop	{r3}
 8000810:	469e      	mov	lr, r3
 8000812:	4770      	bx	lr

08000814 <_fini>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	bf00      	nop
 8000818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081a:	bc08      	pop	{r3}
 800081c:	469e      	mov	lr, r3
 800081e:	4770      	bx	lr
